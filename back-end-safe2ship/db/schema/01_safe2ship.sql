-- //------------------------------------------------------------- --

DROP DATABASE IF EXISTS safe2ship;

CREATE DATABASE safe2ship;
\c safe2ship

CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- //------------------------------------------------------------- --

CREATE OR REPLACE FUNCTION random_between(low INT ,high INT) 
   RETURNS INT AS
$$
BEGIN
   RETURN floor(random()* (high-low + 1) + low);
END;
$$ language 'plpgsql' STRICT;

-- //------------------------------------------------------------- --

DROP TABLE IF EXISTS shippers CASCADE;

CREATE TABLE shippers(
  id SERIAL PRIMARY KEY NOT NULL,
  unique_id uuid DEFAULT uuid_generate_v4() UNIQUE,
  name VARCHAR(255) NOT NULL,
  phone VARCHAR(255),
  email VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL,
  photo TEXT DEFAULT CAST(random_between(0,1) AS TEXT),
  address VARCHAR(255),
  number_of_orders INTEGER,
  number_of_packages INTEGER,
  rating_sum INTEGER,
  bio TEXT,
  ccard_info TEXT,
  company_information TEXT,
  driving_record TEXT,
  photo_id TEXT,
  status VARCHAR(20) DEFAULT 'shipper',
  total_declined INTEGER,
  messages TEXT, -- images, text
  system_id VARCHAR(10), --for the future
  web_link TEXT,
  work_schedule TEXT,
  time_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  time_updated TIMESTAMP DEFAULT NOW()
);

-- //------------------------------------------------------------- --
DROP TABLE IF EXISTS customers CASCADE;

CREATE TABLE customers(
  id SERIAL PRIMARY KEY NOT NULL,
  unique_id uuid DEFAULT uuid_generate_v4() UNIQUE,
  name VARCHAR(255) NOT NULL,
  phone VARCHAR(255),
  email VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL,
  photo TEXT DEFAULT CAST(random_between(0,1) AS TEXT),
  address VARCHAR(255),
  number_of_orders INTEGER,
  number_of_packages INTEGER,
  rating_sum INTEGER,
  bio TEXT,
  ccard_info TEXT,
  company_information TEXT,
  driving_record TEXT DEFAULT 'N/A',
  photo_id TEXT,
  status VARCHAR(20) DEFAULT 'customer',
  total_declined INTEGER,
  messages TEXT, -- images, text
  system_id VARCHAR(10), --for the future
  web_link TEXT,
  work_schedule TEXT DEFAULT 'N/A',
  time_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  time_updated TIMESTAMP DEFAULT NOW()
);


-- //------------------------------------------------------------- --
DROP TABLE IF EXISTS packages CASCADE;

CREATE TABLE packages(
  id SERIAL PRIMARY KEY NOT NULL UNIQUE,
  owner_id uuid, --unique_id of owner
  size TEXT,
  weight TEXT,
  description TEXT,
  source TEXT,
  destination TEXT,
  possible_pickup_times TEXT,
  delivery_deadline TIMESTAMP,
  status VARCHAR (128), --ready, shipped, delivered, declined, delivered_late
  price INTEGER,
  messages TEXT, -- images, text
  time_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  time_updated TIMESTAMP DEFAULT NOW()
);

-- //------------------------------------------------------------- --
DROP TABLE IF EXISTS orders CASCADE;

CREATE TABLE orders(
  id SERIAL PRIMARY KEY NOT NULL,
  owner_id uuid,
  shipper_id uuid REFERENCES shippers(unique_id) ON DELETE CASCADE,
  package_id INTEGER REFERENCES packages(id) ON DELETE CASCADE,
  map TEXT, 
  status VARCHAR (128), --ready, shipped, delivered, declined, delivered_late
  time_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  time_updated TIMESTAMP DEFAULT NOW()
);

-- //------------------------------------------------------------- --
DROP TABLE IF EXISTS messages CASCADE;

CREATE TABLE messages(

  id SERIAL PRIMARY KEY NOT NULL, --unique autogenerated
  sender_Id uuid, ---- ueserId: unique_id UUID
  code VARCHAR (2) NOT NULL, ---CM/PM === clientMessage/packageMessage
  pkg_Id INTEGER REFERENCES packages(id) ON DELETE CASCADE, ---
  owner_id uuid, ---- ueserId: unique_id UUID--
  shipper_id uuid REFERENCES shippers(unique_id) ON DELETE CASCADE, ---- ueserId: unique_id UUID--
  text_message  TEXT, ----- textMessage
  file_message  TEXT, ----- fast upload to object storage then return url
  receiver_Id uuid, ---- ueserId: unique_id UUID ---
  status VARCHAR (128), --- deleted, edited, all(meaning:sent to everyone), individual, group, etc
  messages_prior TEXT, -- [list of previous messages with this same client or on this same pkg - only until when you joint] //----- ?
  time_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  time_updated TIMESTAMP DEFAULT NOW()

);
-- //------------------------------------------------------------- --