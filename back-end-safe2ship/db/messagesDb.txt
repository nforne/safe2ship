- there are package massages and there are client messanges
- for separation of concern, create *messages* table on safe2ship. --- ***
- clint meassages are notifications, newsletters and official platform messages
- CONSIDER SETTING THIS WITH MONGODB, pg for now though.

messageSchema:

** the messages go into the *messages* table on safe2ship
  - the only reason two connect on the platform is a pkg. So the messaging goes where the pkg is
  - you can chat on a pkg only if your shipping request has been confirm (you lose the prevelege upon unconfirmed) or you are pkg owner
    - and pkg tracks become footprint stamps - permanent and frozen , 
        * permanent every five minutes of unfocus. Can edit before then.
        * freeze when pkg shipper is confirmed and the reverse is true - unconfirmed, unfreeze, - temporal freeze
        - when a pkg is shipped, all other parties loss all preveleges to the pkg -- messaging, tracking, etc
        - in any case, permanent or temporal freeze, collect participants id's (history), message and crud accordingly, remove pkg from them. -- permanent freeze
** - each chatroom opened, makes a call to the back for its messages 
      - can't make the call if you don't have rights to the pkg (in your orderCart or own it.)
      - retrieve only messages from when you joined the conversation
      - auto publish join message (first message) - expression of interest by adding to orderCart and earning pkg messeges prevelege
        or posting a new pkg (default messages) -- full messaging preveleges only when a proper shipping connection is established
** - chatroom should auto show shipping updates

message = {
  id : unique autogenerated
  sender_Id: ---- ueserId
  code: ---CM/PM === clientMessage/packageMessage
  pkg_Id: ---
  owner_id: --
  shipper_id: --
  text : ----- textMessage
  file : ----- fast upload to object storage then return url
  receiver_Id: ---
  status: --- deleted, edited, all(meaning:sent to everyone), individual, group, etc
  messages_prior: [list of previous messages with this same client or on this same pkg - only until when you joint] //----- ?
  time_created: --
  time_updated: --
}

** on usersTables, customer or shipper: on the messages column, store [list of client message ids - and all(broadcasts)], 
** on each pkg on the massages column, store [list of pkg's messages ids]

- design the chat box for pkgMessages
- design the view box template structure for each pkgMessage, left display for others, and right for me (the user)
- design the view box template for clientMessages

me-otherClient
me-aboutPkg
replies

//*---------------------------------------------------------------------------------------------------------------------
MONGODB mostly
 - each pkg (i.e. conversation or chartroom is a table from which all parties can read
   
   ** request by opening chatroom --> pending display and retrieve messages --> sort and display messages in template

    - chatroom table names:
        the userName_id of the person who wrote first.
    - first time writing or posting a pkg create the table(open the chatroom) and save the message.
    - any one else can join this conversation
        read messages only from when you join the conversation
    - when a posted pkg is moved to an order, the pkg chatroom is closed and all parties notified and then,
        - a pgk chatroom is opened with customer and shipper as participants. 
        - the chatroom name will be ownerName_pkgId, a table on safe2shipMessages
*//--------------------------------------------------------------------------------------------------------------------

** the life and dynamics goes where the pkg goes, all behind it on its tracks becomes immutable history unless delete by choice.
** all users need pkgs and orders and their histories, only selectively - meaning you don't see what is not yours or authorised.

** crud actions confirmations at every necessary point. --> pendings too.
** users connect via chat only when they have buisness.

** a refresh button, for now
** script reports/constact_us template - client or order